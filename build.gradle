/*
 * Copyright 2025 Volusion, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

def gitRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
  }

  return hashStdOut.toString().trim()
}

project.ext.gitRevision = gitRevision()

group = 'cd.go.contrib.task.powershell'
version = '1.0.10-SNAPSHOT' // x-release-please-version

// these values that go into plugin.xml
project.ext.pluginDesc = [
  id         : 'cd.go.contrib.task.powershell',
  version    : project.version,
  goCdVersion: '21.2.0',
  name       : 'Powershell Task Plugin',
  description: 'GoCD task plugin to run PowerShell scripts.',
  vendorName : 'Volusion',
  vendorUrl  : 'https://github.com/volusion/gocd-powershell-task-plugin'
]

java {
  sourceCompatibility = JavaVersion.VERSION_15
  targetCompatibility = JavaVersion.VERSION_15
}

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '25.1.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.13.1'
  compile group: 'commons-io', name: 'commons-io', version: '2.19.0'

//  testImplementation group: 'org.junit', name: 'junit-bom'
//  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
//  testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher'
  testCompile group: 'org.hamcrest', name: 'hamcrest', version: '3.0'
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.3'

  runtimeClasspath group: 'org.webjars.npm', name: 'ace-builds', version: '1.40.0'
}

processResources {
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

test {
  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

// Define a CopySpec for the Ace editor resources
def aceResourceCopySpec = copySpec {
  from {
    configurations.runtimeClasspath.findAll { it.name.contains('ace-builds') }.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  include 'META-INF/resources/webjars/ace-builds/**'
//   eachFile { details ->
//     details.path = details.path.replaceFirst('META-INF/resources/webjars/', 'static/')
//   }
}

jar {
  manifest {
    attributes(
      'Go-Version': project.version,
      'ImplementationVersion': project.version,
      'Go-Revision': project.gitRevision,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Source-Compatibility': project.sourceCompatibility,
      'Target-Compatibility': project.targetCompatibility
    )
  }

  from(configurations.compile) {
    into "lib/"
  }

  from(sourceSets.main.java) {
    into "/"
  }

  // Use the copy spec for Ace editor resources
  with aceResourceCopySpec
}

// Add a task to help debug what files are available in the Ace WebJar
task listAceFiles {
  doLast {
    configurations.runtimeClasspath.each { file ->
      if (file.name.contains('ace-builds')) {
        zipTree(file).visit { fileDetails ->
          if (fileDetails.path.contains('ace-builds')) {
            println fileDetails.path
          }
        }
      }
    }
  }
}
